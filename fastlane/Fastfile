default_platform(:ios)

platform :ios do

    desc "Setups project"
    desc "Options: 'master:true' for account holder setup"
    lane :setup do |options|
        prepare_certificates(master: options[:master])
        run_tuist(open: true)
    end
    
    desc "Sets marketing version"
    desc "Options: 'version:1.0.0'"
    lane :set_marketing_version do |options|
        version = options[:version]

        unless version
            UI.user_error!("Error: Missing required option 'version'. Example usage: fastlane set_marketing_version version:1.0.0")
        end

        unless version =~ /^\d+\.\d+\.\d+$/
            UI.user_error!("Error: Invalid version format. Expected format: X.Y.Z (e.g., 1.0.0)")
        end

        update_xcconfig_value(
            path: 'Configs/App.xcconfig',
            name: 'CURRENT_PROJECT_VERSION',
            value: version
        )

        UI.success("Marketing version set to #{version}")
    end

    desc "Uploads to TestFlight"
    lane :upload do
        prepare_certificates
        update_build_number
        run_tuist
        build_ipa
        upload_dsym_to_sentry
        upload_app_to_testflight
        notify_all
    end
    
    # --------------------------------------------------
    
    desc "Prepare certificates via match"
    desc "Options: 'master:true' for registering new devices"
    lane :prepare_certificates do |options|
        if options[:master]
            register_devices(devices_file: "Fastlane/devices.txt")
        end
         
        match(
            type: "development",
            readonly: !options[:master],
            force_for_new_devices: options[:master]
        )
        
        match(
            type: "appstore",
            readonly: !options[:master]
        )
    end
    
    desc "Updates build number to total commit count"
    lane :update_build_number do
        build = sh("git rev-list --all --count").chomp.strip
        update_xcconfig_value(
            path: 'Configs/App.xcconfig',
            name: 'CURRENT_PROJECT_VERSION',
            value: build
        )
    end
    
    desc "Runs Tuist install & generate"
    desc "Options: 'open:true' "
    lane :run_tuist do |options|
        Dir.chdir("..") do
            sh("tuist install")
            if options[:open]
                sh("tuist generate")
            else
                sh("tuist generate --no-open")
            end
        end
    end
    
    desc "Builds and signs ipa file"
    lane :build_ipa do
        version = get_xcconfig_value(
            path: 'Configs/App.xcconfig',
            name: 'MARKETING_VERSION'
        )
        
        output_name = "ForPDA_#{version}"
        
        build_app(
            scheme: "ForPDA",
            output_directory: "build/",
	        output_name: output_name,
            cloned_source_packages_path: "SourcePackages",
	        silent: true,
	        suppress_xcode_output: true,
	        skip_package_pkg: true,
	        export_method: "app-store",
	        export_options: {
	            provisioningProfiles: { 
		            "com.subvert.forpda" => "match AppStore com.subvert.forpda",
		            "com.subvert.forpda.safariextension" => "match AppStore com.subvert.forpda.safariextension"
      	        }
	        }
        )
    end
    
    desc "Uploads DSYM files to Sentry"
    lane :upload_dsym_to_sentry do
        auth_token = get_xcconfig_value(
            path: 'Configs/Secrets.xcconfig',
            name: 'SENTRY_DSYM_TOKEN'
        )
        
        sentry_debug_files_upload(
            auth_token: auth_token,
            org_slug: 'forpda',
            project_slug: 'apple-ios',
            include_sources: true
        )
    end
    
    desc "Uploads app to TestFlight"
    lane :upload_app_to_testflight do
        app_store_connect_api_key(
            key_id: "X36R58TMRJ",
            issuer_id: "814e488e-06ba-40ba-a16c-a63e7164023f",
            key_filepath: "Fastlane/AuthKey_X36R58TMRJ.p8"
        )
        
        version = get_xcconfig_value(
            path: 'Configs/App.xcconfig',
            name: 'MARKETING_VERSION'
        )
        
        ipa_name = "ForPDA_#{version}.ipa"

        upload_to_testflight(
            ipa: "./build/#{ipa_name}"
	    )
    end
    
    desc "Notifies to all available channels"
    lane :notify_all do
        notification(
            subtitle: "Uploading Finished!",
            message: "Build is on TestFlight",
            content_image: "Images/logo.png"
        )
        
        version = get_xcconfig_value(path: 'Configs/App.xcconfig', name: 'MARKETING_VERSION')
        build = sh("git rev-list --all --count").chomp.strip
        
        telegram(
            token: ENV['TG_BOT_TOKEN'],
            chat_id: ENV['TG_CHAT_ID'],
            text: "Версия #{version} (#{build}) загружена на TestFlight"
        )
    end
    
    # --------------------------------------------------

    error do |lane, exception, options|
        notification(
            subtitle: "Error while executing #{lane}!",
            message: "#{exception}",
            content_image: "Images/logo.png"
        )
    end

end
